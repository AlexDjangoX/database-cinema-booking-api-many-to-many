// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Customer {
  id          Int       @id @default(autoincrement())
  name        String
  contact     Contact?
  tickets     Ticket[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Contact {
  id          Int       @id @default(autoincrement())
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  Int
  phone       String
  email       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Movie {
  id          Int         @id @default(autoincrement())
  screenings  Screening[]
  title       String
  runtimeMins Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Screen {
  id          Int @id @default(autoincrement())
  number      Int
  seat        Seat[]
  screenings  Screening[]


  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Screening {
  id          Int       @id @default(autoincrement())
  tickets     Ticket[]
  movie       Movie     @relation(fields: [movieId], references: [id])
  movieId     Int
  screen      Screen    @relation(fields: [screenId], references: [id])
  screenId    Int
  startsAt    DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Ticket {
  id            Int       @id @default(autoincrement())
  screening     Screening @relation(fields: [screeningId], references: [id])
  screeningId   Int
  customer      Customer  @relation(fields: [customerId], references: [id])
  customerId    Int

  seats         Seat[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Seat {
  id            Int       @id @default(autoincrement())
  type          String

  tickets       Ticket[]
  screen        Screen @relation(fields: [screenId], references: [id])
  screenId      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// const express = require("express");
// const { createTicket } = require("../controllers/tickets");

// const router = express.Router();

// router.post("/tickets", createTicket);

// module.exports = router;
// const prisma = require("../utils/prisma");

// const createTicket = async (req, res) => {
//   const createdTicket = await prisma.ticket.create({
//     data: {
//       screenId: 1,
//       seats: {
//         createOrConnect: {
//           row: 1,
//           letter: "A",
//           screenId: 1,
//         },
//       },
//     },
//     include: {
//       seats: true,
//     },
//   });

//   res.json({ data: createdTicket });
// };

// module.exports = { createTicket };